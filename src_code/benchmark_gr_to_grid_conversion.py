# -*- coding: utf-8 -*-
"""benchmark_gr_to_grid_conversion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IlhG1nvrvZRdil2b1zzfq8PHsgVsMrFy
"""

import re

def convert_adaptec_gr_with_comments(gr_file_path, output_file_path):
    with open(gr_file_path, 'r') as f:
        lines = f.readlines()

    grid_x, grid_y = None, None
    nets = []
    scaling_factor = 400  # Convert real coords to grid

    # Parse grid size
    for line in lines:
        if line.startswith("grid"):
            _, grid_x, grid_y, _ = line.strip().split()
            grid_x, grid_y = int(grid_x), int(grid_y)
            break

    i = 0
    while i < len(lines):
        line = lines[i].strip()

        # Match standard nets
        if re.match(r'^n\d+', line):
            parts = line.split()
            num_pins = int(parts[2])
            pins = []
            for _ in range(num_pins):
                i += 1
                coords = list(map(int, lines[i].strip().split()))
                if len(coords) >= 2:
                    x = coords[0] // scaling_factor
                    y = coords[1] // scaling_factor
                    pins.append((x, y))
            if len(pins) >= 2:
                src, tgt = pins[0], pins[-1]
                nets.append((src[0], src[1], tgt[0], tgt[1]))

        # Match direct grid-like entries (from last part of file)
        elif re.match(r'^\d+ \d+ \d+\s+\d+ \d+ \d+', line):
            parts = re.split(r'\s+', line.strip())
            if len(parts) >= 6:
                src_x, src_y = int(parts[0]), int(parts[1])
                tgt_x, tgt_y = int(parts[3]), int(parts[4])
                nets.append((src_x, src_y, tgt_x, tgt_y))

        i += 1

    # Write to output with comments
    with open(output_file_path, 'w') as out:
        out.write(f"# {grid_x}x{grid_y} Grid\n")
        out.write(f"{grid_x} {grid_y}\n")
        for net in nets:
            out.write(f"{net[0]} {net[1]} {net[2]} {net[3]}  # Source ({net[0]},{net[1]}) -> Target ({net[2]},{net[3]})\n")

    print(f"âœ… Created '{output_file_path}' with {len(nets)} nets in commented format.")

# Example usage:
convert_adaptec_gr_with_comments("bigblue2.gr", "bigblue2.grid")